# Instructions for relocating the bsp #
This is useful for:

* Those who would like to compile buildroot themselves, and share the binaries with others, without assuming that they have administrator rights.
* Want to compile in features that are not part of the default buildroot configuration. The main reason for doing this, is for groups who would like to use SDL.

Assuming that the AVR32 buildroot is extracted in ~/buildroot-avr32-v3.0.0 and that we are using ~/atstk1002_bsp as the output folder.

1. cd ~/buildroot-avr32-v3.0.0
2. make O=~/atstk1002_bsp atstk1002_defconfig
3. make O=~/atstk1002_bsp menuconfig # Include at least alsa-lib. fbdump and SDL are a also useful
4. make O=~/atstk1002_bsp linux26-menuconfig # Compile sound support into the kernel
 O=~/atstk1002_bsp O=~/atstk1002_bsp O=~/atstk1002_bsp O=~/atstk1002_bsp O=~/atstk1002_bsp
 5. make O=~/atstk1002_bsp

 After successfully compiling buildroot, the cross-toolchain will reside in  ~/atstk1002_bsp/staging. ~/atstk1002_bsp/images contains a tar.gz archive with the STK1000 filesystem, the u-boot boot loader and the linux kernel image (uImage).

 To set up the toolchain for use, edit ~/.bashrc and append the following line at the end:
 export PATH=$PATH:~/atstk1002_bsp/staging/usr/bin

After starting a new terminal session or sourcing .bashrc, the avr32-linux-gcc command should be available.

 Moving the atstk1002_bsp folder will confuse GCC. In that case, we will have to invoke avr32-linux-gcc with the appropriate --sysroot argument. For instance:
 avr32-linux-gcc --sysroot=<my home dir>/atstk1002_bsp/staging hello.c -o hello

# SD card image contents (ATSTK1002_BSP_SD_image_3.0.0.tar.gz) # (this should be available on every machine)
The archive contains the u-boot boot loader and an SD card image with files from /opt/atstk1002_bsp/images.

The SD card image includes the following:

* An ext3 filesystem
* A swap partition
* swap partition activated at boot
* Deactivated portmap and cdc-gadget
* Set up avr32 user with username/password avr32/avr32

# Known issues #
## The kernel OOM killer is triggered during boot ##
The default buildroot configuration for ATSTK1002 uses too much memory. With only 8MB at its disposal, and without any swap space, the kernel cannot do anything but killing processes that it thinks is responsible for using a lot of memory.

This can be fixed by creating a swap partition, and enabling this at the end of the "bootstrap" script (/etc/init.d/S00bootstrap.sh).

Services that are not needed can be disabled by removing the execute bit from scripts in /etc/init.d. Unless we plan to use NFS, we can disable portmap like this:
chmod -x /etc/init.d/S13portmap

## Compiling buildroot fails when doing "makedevs" ##
This problem is caused by the compiler complaining about a declared variable not being used. This can be fixed by changing
return 0;
to
return ret;

at the end of ~/atstk1002_bsp/build/host-makedevs/makedevs.c

## Issues with using alsa (failed setting hw params etc) ##
Use OSS instead of alsa-lib.
